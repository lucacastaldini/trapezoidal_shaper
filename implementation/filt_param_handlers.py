import csv

import numpy as np 

from implementation.tps import time_filter, compute_threshold
from gammasim import GammaSim


def find_time_filter_params(gs : GammaSim, t, alpha_l, alpha_h, gain_k, th_dy_multiplier = 3.2, th_d2y_multiplier = 0.2):
    y ,b, dyy, d2yy = time_filter(t, gs.get_dataset()[0], alpha_l, alpha_h, gain_k)
    if th_dy_multiplier is not None:
        th_detection_dy = compute_threshold(dyy, th_dy_multiplier)
    else:
        th_detection_dy = 0
    if th_d2y_multiplier is not None:
        th_detection_d2y = compute_threshold(d2yy, th_d2y_multiplier)
    else:
        th_detection_d2y = 0

    return th_detection_dy, th_detection_d2y


def read_time_param(csv_file):
    """
    Reads the CSV file generated by `find_time_filter_params` and returns the filter parameters.

    Parameters:
    csv_file (str): The path to the CSV file.

    Returns:
    dict: A dictionary containing the filter parameters.
    """
    params = {}
    
    with open(csv_file, mode='r') as file:
        reader = csv.reader(file)
        headers = next(reader)  # Read the header row
        values = next(reader)   # Read the parameter values
        
        # Convert the header and values into a dictionary
        params = {header: float(value) for header, value in zip(headers, values)}

    return params  # Return the parameters as a dictionary


def save_trap_params(scaling_factor, std, out='trap_filt_params.csv'):

    with open(out, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Average', 'Variance'])  # Header
        writer.writerow([scaling_factor, std])  # Data


def read_trap_params(csv_file):
    """
    Reads the CSV file generated by `find_trap_params` and returns the trapezoidal filter parameters.

    Parameters:
    csv_file (str): The path to the CSV file.

    Returns:
    dict: A dictionary containing the trapezoidal filter parameters.
    """
    params = {}
    
    with open(csv_file, mode='r') as file:
        reader = csv.reader(file)
        headers = next(reader)  # Read the header row
        values = next(reader)   # Read the parameter values
        
        # Convert the header and values into a dictionary
        params = {header: float(value) for header, value in zip(headers, values)}

    return params  # Return the parameters as a dictionary
